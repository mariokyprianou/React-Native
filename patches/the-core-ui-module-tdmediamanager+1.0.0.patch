diff --git a/node_modules/the-core-ui-module-tdmediamanager/src/views/VideoView.js b/node_modules/the-core-ui-module-tdmediamanager/src/views/VideoView.js
index c1656ea..03a2baa 100644
--- a/node_modules/the-core-ui-module-tdmediamanager/src/views/VideoView.js
+++ b/node_modules/the-core-ui-module-tdmediamanager/src/views/VideoView.js
@@ -5,29 +5,40 @@
  * Copyright (c) 2020 The Distance
  */
 
-import React, { Component, useLayoutEffect, useEffect, useRef, useState } from 'react';
+import React, { Component, useLayoutEffect, useEffect, useRef, useState, useImperativeHandle, forwardRef } from 'react';
 import { Text, StyleSheet, Image, View, Dimensions } from 'react-native';
 import * as R from 'ramda';
 import Video from 'react-native-video';
 import MediaControls, { PLAYER_STATES } from 'react-native-media-controls';
 import FileManager from '../utilities/FileManager';
 
-export default function VideoView(props) {
+export function CustomVideoView(props, ref) {
 	const { getLocalFile } = FileManager;
 
 	const videoPlayer = useRef(null);
 
+	useImperativeHandle(ref, () => ({
+	pause: () => {
+			onPaused()
+	},
+	reset: () => {
+		setTimeout(() => onSeek(0), 100);
+	}
+  }));
+
+
 	const [containerHeight, setContainerHeight] = useState('31%');
 	const [currentTime, setCurrentTime] = useState(0);
 	const [duration, setDuration] = useState(0);
 	const [isFullScreen, setIsFullScreen] = useState(false);
 	const [isLoading, setIsLoading] = useState(true);
-	const [paused, setPaused] = useState(false);
+	const [paused, setPaused] = useState(!props.autoplay);
 	const [playerState, setPlayerState] = useState(PLAYER_STATES.PLAYING);
-	const [screenType, setScreenType] = useState('content');
+	const [screenType, setScreenType] = useState('cover');
 	const [url, setUrl] = useState(null);
 
 	useEffect(() => {
+		
 		if (props.startInFullScreen) {
 			onFullScreen();
 		}
@@ -37,7 +48,7 @@ export default function VideoView(props) {
 		} else {
 			checkForLocalFile();
 		}
-	}, []);
+	}, [props.url]);
 
 	async function checkForLocalFile() {
 		const res = await getLocalFile(props.url);
@@ -50,14 +61,14 @@ export default function VideoView(props) {
 	}
 
 	const onSeek = (seek) => {
-		videoPlayer.seek(seek);
+		videoPlayer.current.seek(seek);
 	};
 
 	const onPaused = (newPlayerState) => {
 		setPaused(!paused);
 		setPlayerState(newPlayerState);
 
-		props.onPaused && props.onPaused();
+		props.onPaused && props.onPaused(!paused);
 	};
 
 	const onReplay = () => {
@@ -79,7 +90,7 @@ export default function VideoView(props) {
 		setDuration(data.duration);
 		setIsLoading(false);
 
-		props.onLoadEnd && props.onLoadEnd();
+		props.onLoadEnd && props.onLoadEnd(data.duration);
 	};
 
 	const onLoadStart = (data) => {
@@ -103,11 +114,9 @@ export default function VideoView(props) {
 	const onSeeking = (newCurrentTime) => setCurrentTime(newCurrentTime);
 
 	const onFullScreen = () => {
-		if (screenType == 'content') {
-			setScreenType('cover');
+		if (!isFullScreen) {
 			setContainerHeight('100%');
 		} else {
-			setScreenType('content');
 			setContainerHeight('31%');
 		}
 		setIsFullScreen(!isFullScreen);
@@ -120,7 +129,7 @@ export default function VideoView(props) {
 	const renderToolbar = () => <></>;
 
 	return (
-		<View style={{ height: containerHeight }}>
+		<View style={{ height: props.height || containerHeight}}>
 			<Video
 				onEnd={onEnd}
 				onLoad={onLoad}
@@ -135,9 +144,12 @@ export default function VideoView(props) {
 				}}
 				style={styles.mediaPlayer}
 				volume={props.volume || 13}
+				muted={props.muted || false}
+
 			/>
 
-			<MediaControls
+			{props.customControls ? props.customControls : (
+				<MediaControls
 				isFullScreen={isFullScreen}
 				duration={duration}
 				isLoading={isLoading}
@@ -153,6 +165,8 @@ export default function VideoView(props) {
 				fadeOutDelay={3000}
 				showOnStart={false}
 			/>
+			)}
+			
 		</View>
 	);
 }
@@ -175,5 +189,10 @@ const styles = StyleSheet.create({
 		bottom: 0,
 		right: 0,
 		backgroundColor: 'black',
+		
 	},
 });
+
+CustomVideoView = forwardRef(CustomVideoView);
+
+export default CustomVideoView;
\ No newline at end of file
