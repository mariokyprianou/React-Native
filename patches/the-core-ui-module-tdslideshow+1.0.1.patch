diff --git a/node_modules/the-core-ui-module-tdslideshow/src/Slideshow.js b/node_modules/the-core-ui-module-tdslideshow/src/Slideshow.js
index a1cee56..e6bf299 100644
--- a/node_modules/the-core-ui-module-tdslideshow/src/Slideshow.js
+++ b/node_modules/the-core-ui-module-tdslideshow/src/Slideshow.js
@@ -15,8 +15,6 @@ import { defaultProps } from "./defaultProps";
 import {
   checkDimensions,
   checkText,
-  checkStyles,
-  checkButtonStyles,
   checkStylesIncHeight,
   checkImageUrl,
 } from "./utils";
@@ -27,52 +25,48 @@ const Slideshow = ({
   afterPic,
   imageWidth,
   imageHeight,
+  CustomButton,
+  CustomCountdown,
   buttonText,
-  buttonStyles,
-  buttonTextStyles,
   sliderStyles,
   sliderSpacerHeight,
   sliderIcon,
   cameraHeaderText,
   overlayImage,
   overlayStyles,
-  cameraButtonStyles,
+  DateSelectors,
+  cameraButtonImage,
 }) => {
   // ******* SETUP *******
   const [activeViewIndex, setActiveViewIndex] = useState(0);
-  const [afterImageWidth, setAfterImageWidth] = useState(150);
-  const [afterImageLeft, setAfterImageLeft] = useState(150);
+  const [afterImageWidth, setAfterImageWidth] = useState(imageWidth / 2);
+  const [afterImageLeft, setAfterImageLeft] = useState(imageWidth / 2);
 
   const {
     defaultImageWidth,
     defaultImageHeight,
     defaultButtonText,
-    defaultButtonStyles,
-    defaultButtonTextStyles,
     defaultSliderStyles,
     defaultSliderSpacerHeight,
     defaultCameraHeaderText,
     defaultOverlayStyles,
-    defaultCameraButtonStyles,
   } = defaultProps();
 
   imageWidth && checkDimensions(imageWidth);
   imageHeight && checkDimensions(imageHeight);
   buttonText && checkText(buttonText);
-  buttonStyles && checkButtonStyles(buttonStyles);
-  buttonTextStyles && checkStyles(buttonTextStyles);
   sliderStyles && checkStylesIncHeight(sliderStyles);
   sliderSpacerHeight && checkStylesIncHeight(sliderSpacerHeight);
   sliderIcon && checkImageUrl(sliderIcon);
   cameraHeaderText && checkText(cameraHeaderText);
   overlayImage && checkImageUrl(overlayImage);
   overlayStyles && checkStylesIncHeight(overlayStyles);
-  cameraButtonStyles && checkStyles(cameraButtonStyles);
 
   // ******* STYLES *******
 
   // ******* FUNCTIONS *******
   function handleAddPhoto() {
+    console.log("handling");
     request(
       Platform.select({
         ios: PERMISSIONS.IOS.CAMERA,
@@ -123,12 +117,12 @@ const Slideshow = ({
         imageHeight={imageHeight || defaultImageHeight}
         afterImageWidth={afterImageWidth}
         afterImageLeft={afterImageLeft}
+        CustomButton={ () => <CustomButton onPress={handleAddPhoto}/>}
         buttonText={buttonText || defaultButtonText}
-        buttonStyles={buttonStyles || defaultButtonStyles}
-        buttonTextStyles={buttonTextStyles || defaultButtonTextStyles}
         sliderStyles={sliderStyles || defaultSliderStyles}
         sliderSpacerHeight={sliderSpacerHeight || defaultSliderSpacerHeight}
-        sliderIcon={sliderIcon}
+        sliderIcon={ sliderIcon }
+        DateSelectors={DateSelectors}
       />
     );
   }
@@ -142,7 +136,8 @@ const Slideshow = ({
         cameraHeaderText={cameraHeaderText || defaultCameraHeaderText}
         overlayImage={overlayImage || null}
         overlayStyles={overlayStyles || defaultOverlayStyles}
-        cameraButtonStyles={cameraButtonStyles || defaultCameraButtonStyles}
+        CustomCountdown={ CustomCountdown }
+        cameraButtonImage={cameraButtonImage}
       />
     );
   }
diff --git a/node_modules/the-core-ui-module-tdslideshow/src/components/AddPhoto.js b/node_modules/the-core-ui-module-tdslideshow/src/components/AddPhoto.js
index 8a1d93e..ee43fa4 100644
--- a/node_modules/the-core-ui-module-tdslideshow/src/components/AddPhoto.js
+++ b/node_modules/the-core-ui-module-tdslideshow/src/components/AddPhoto.js
@@ -15,19 +15,24 @@ import TDIcon from "the-core-ui-component-tdicon";
 import Header from "./Header";
 import { ScaleHook } from "react-native-design-to-component";
 
+const overlay = require('../../../../assets/images/cameraPerson.png');
+
 const AddPhoto = ({
   handlePhotoClick,
   setActiveViewIndex,
   setPhoto,
   cameraHeaderText,
-  overlayImage,
+  // overlayImage,
   overlayStyles,
-  cameraButtonStyles,
+  CustomCountdown,
+  cameraButtonImage,
 }) => {
   // ******* SETUP *******
   const [cameraRef, setCameraRef] = useState();
   const [cameraType, setCameraType] = useState("back");
-  const { getHeight, fontSize } = ScaleHook();
+  const { getHeight, fontSize, getWidth } = ScaleHook();
+
+  const overlayImage = overlay;
 
   // ******* STYLES *******
   const styles = {
@@ -62,9 +67,16 @@ const AddPhoto = ({
       backgroundColor: "white",
     },
     rotateButton: {
-      size: fontSize(45),
+      size: fontSize(24),
+      color: "black",
+    },
+    cameraButton: {
+      size: fontSize(60),
       color: "black",
     },
+    sideButtons: {
+      width: getWidth(50),
+    }
   };
 
   // ******* FUNCTIONS *******
@@ -97,6 +109,8 @@ const AddPhoto = ({
     if (cameraType === "back") setCameraType("front");
     if (cameraType === "front") setCameraType("back");
   }
+
+  function handleTimerStart() {}
   // ******* RENDER *******
 
   return (
@@ -121,13 +135,23 @@ const AddPhoto = ({
             }
           }}
         </RNCamera>
-        <View style={styles.buttonContainer}>
+        <View style={ styles.buttonContainer }>
+          { CustomCountdown && (
+              <View style={styles.sideButtons}>
+                <CustomCountdown />
+              </View>
+          )}
           <TouchableOpacity onPress={() => handlePhotoClick(cameraRef)}>
-            <TDIcon input="dot-circle" inputStyle={cameraButtonStyles} />
-          </TouchableOpacity>
-          <TouchableOpacity onPress={handleSwitchView}>
-            <TDIcon input="sync" inputStyle={styles.rotateButton} />
+            <TDIcon
+              input={ cameraButtonImage ? cameraButtonImage : "dot-circle" }
+              inputStyle={ cameraButtonImage ? null : styles.cameraButton }
+            />
           </TouchableOpacity>
+          <View style={styles.sideButtons}>
+            <TouchableOpacity onPress={handleSwitchView}>
+              <TDIcon input="sync" inputStyle={styles.rotateButton} />
+            </TouchableOpacity>
+          </View>
         </View>
       </View>
     </View>
diff --git a/node_modules/the-core-ui-module-tdslideshow/src/components/ImageSlider.js b/node_modules/the-core-ui-module-tdslideshow/src/components/ImageSlider.js
index 6867d80..45c929f 100644
--- a/node_modules/the-core-ui-module-tdslideshow/src/components/ImageSlider.js
+++ b/node_modules/the-core-ui-module-tdslideshow/src/components/ImageSlider.js
@@ -19,6 +19,8 @@ import TDIcon from "the-core-ui-component-tdicon";
 import Slider from "@react-native-community/slider";
 import { ScaleHook } from "react-native-design-to-component";
 
+const sliderThumb = require('../../../../assets/icons/photoSlider.png');
+
 const ImageSlider = ({
   handleAddPhoto,
   handleSlideChange,
@@ -28,16 +30,17 @@ const ImageSlider = ({
   imageHeight,
   afterImageWidth,
   afterImageLeft,
+  CustomButton,
   buttonText,
-  buttonStyles,
-  buttonTextStyles,
   sliderStyles,
+  sliderSpacerHeight,
   sliderIcon,
+  DateSelectors
 }) => {
   // ******* SETUP *******
   const screenWidth = Dimensions.get("screen").width;
   const leftAlign = (screenWidth - imageWidth) / 2;
-  const { getHeight } = ScaleHook();
+  const { getHeight, getWidth, fontSize } = ScaleHook();
 
   // ******* STYLES *******
   const styles = StyleSheet.create({
@@ -79,20 +82,38 @@ const ImageSlider = ({
       alignItems: "center",
       alignSelf: "center",
       marginVertical: getHeight(10),
-      ...buttonStyles,
+      backgroundColor: "white",
+      width: "90%",
+      height: "10%",
+      marginTop: getHeight(35),
     },
     buttonText: {
-      ...buttonTextStyles,
+      fontSize: fontSize(17),
+      fontWeight: "bold",
+      color: "black",
+    },
+    iconContainer: {
+      position: 'absolute',
+      right: getWidth(10),
+    },
+    linearGradientStyle: {
+      flex: 1,
+      flexDirection: "row",
+      justifyContent: "center",
+      alignItems: "center",
+      alignSelf: "center",
+      height: getHeight(50),
     },
   });
 
-  const sliderWidth = imageWidth + 27;
+  const sliderWidth = imageWidth + 40;
 
   // ******* FUNCTIONS *******
   // ******* RENDER *******
   return (
     <View>
-      <View style={styles.imagesContainer}>
+      <View style={ styles.imagesContainer }>
+        {DateSelectors && <DateSelectors />}
         <View style={styles.beforeContainer}>
           {beforePic && (
             <Image source={{ uri: beforePic }} style={styles.beforeImage} />
@@ -104,6 +125,7 @@ const ImageSlider = ({
           )}
         </View>
       </View>
+      <View style={sliderSpacerHeight} />
       <Slider
         style={{
           width: sliderWidth,
@@ -117,21 +139,29 @@ const ImageSlider = ({
         minimumTrackTintColor={sliderStyles.minimumTrackTintColor}
         maximumTrackTintColor={sliderStyles.maximumTrackTintColor}
         onValueChange={(value) => handleSlideChange(value)}
-        thumbImage={sliderIcon || null}
+        thumbImage={sliderThumb}
       />
-      <View style={styles.button}>
-        <TouchableOpacity onPress={handleAddPhoto}>
-          <Text style={styles.buttonText}>{buttonText}</Text>
-        </TouchableOpacity>
-        <TDIcon
-          input="chevron-right"
-          inputStyle={{
-            size: styles.buttonText.fontSize,
-            color: styles.buttonText.color,
-            solid: true,
-          }}
-        />
-      </View>
+      {CustomButton ?
+        <CustomButton />
+        :
+        (
+          <View style={ styles.button }>
+            <TouchableOpacity onPress={handleAddPhoto}>
+              <Text style={styles.buttonText}>{buttonText}</Text>
+            </TouchableOpacity>
+            <View style={styles.iconContainer}>
+              <TDIcon
+              input="chevron-right"
+              inputStyle={{
+                size: styles.buttonText.fontSize,
+                color: styles.buttonText.color,
+                solid: true,
+              }}
+              />
+            </View>
+          </View>
+        )
+      }
     </View>
   );
 };
diff --git a/node_modules/the-core-ui-module-tdslideshow/src/defaultProps/index.js b/node_modules/the-core-ui-module-tdslideshow/src/defaultProps/index.js
index 7991319..e0ddc2b 100644
--- a/node_modules/the-core-ui-module-tdslideshow/src/defaultProps/index.js
+++ b/node_modules/the-core-ui-module-tdslideshow/src/defaultProps/index.js
@@ -15,18 +15,6 @@ export function defaultProps() {
     defaultImageWidth: getWidth(300),
     defaultImageHeight: getHeight(250),
     defaultButtonText: "ADD PHOTO",
-    defaultButtonStyles: {
-      backgroundColor: "#00cccc",
-      width: "80%",
-      height: "10%",
-      marginTop: getHeight(35),
-    },
-    defaultButtonTextStyles: {
-      fontSize: fontSize(17),
-      fontWeight: "bold",
-      color: "white",
-      marginHorizontal: getWidth(70),
-    },
     defaultSliderStyles: {
       height: getHeight(30),
       minimumTrackTintColor: "transparent",
@@ -41,9 +29,5 @@ export function defaultProps() {
       top: getHeight(-50),
       resizeMode: "contain",
     },
-    defaultCameraButtonStyles: {
-      size: fontSize(60),
-      color: "aqua",
-    },
   };
 }
diff --git a/node_modules/the-core-ui-module-tdslideshow/src/utils/index.js b/node_modules/the-core-ui-module-tdslideshow/src/utils/index.js
index feb6def..b82e620 100644
--- a/node_modules/the-core-ui-module-tdslideshow/src/utils/index.js
+++ b/node_modules/the-core-ui-module-tdslideshow/src/utils/index.js
@@ -15,11 +15,6 @@ export function checkText(text) {
   if (typeof text !== "string") throw new Error("Text should be a string");
 }
 
-export function checkStyles(styles) {
-  if (typeof styles !== "object" || Array.isArray(styles))
-    throw new Error("Styles must be an object");
-}
-
 export function checkButtonStyles(styles) {
   if (typeof styles !== "object" || Array.isArray(styles))
     throw new Error("Styles must be an object");
