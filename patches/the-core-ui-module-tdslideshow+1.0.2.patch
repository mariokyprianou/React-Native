diff --git a/node_modules/the-core-ui-module-tdslideshow/src/Slideshow.js b/node_modules/the-core-ui-module-tdslideshow/src/Slideshow.js
index 82dabb6..cf0a4a3 100644
--- a/node_modules/the-core-ui-module-tdslideshow/src/Slideshow.js
+++ b/node_modules/the-core-ui-module-tdslideshow/src/Slideshow.js
@@ -31,6 +31,7 @@ const Slideshow = ({
   CustomCountdown,
   DateSelectors,
   cameraButtonImage,
+  CustomHeader,
 }) => {
   // ******* SETUP *******
   const [activeViewIndex, setActiveViewIndex] = useState(0);
@@ -114,7 +115,8 @@ const Slideshow = ({
         sliderStyles={sliderStyles || defaultSliderStyles}
         sliderSpacerHeight={sliderSpacerHeight || defaultSliderSpacerHeight}
         sliderIcon={sliderIcon}
-        DateSelectors={DateSelectors}
+        DateSelectors={ DateSelectors }
+        CustomHeader={CustomHeader}
       />
     );
   }
diff --git a/node_modules/the-core-ui-module-tdslideshow/src/components/AddPhoto.js b/node_modules/the-core-ui-module-tdslideshow/src/components/AddPhoto.js
index f41ddff..9920b18 100644
--- a/node_modules/the-core-ui-module-tdslideshow/src/components/AddPhoto.js
+++ b/node_modules/the-core-ui-module-tdslideshow/src/components/AddPhoto.js
@@ -28,12 +28,13 @@ const AddPhoto = ({
   // ******* SETUP *******
   const [cameraRef, setCameraRef] = useState();
   const [cameraType, setCameraType] = useState("back");
-  const { getHeight, fontSize } = ScaleHook();
+  const { getHeight, getWidth, fontSize } = ScaleHook();
 
   // ******* STYLES *******
   const styles = {
     pageContainer: {
       height: "100%",
+      backgroundColor: 'rgba(252, 252, 252, 1)',
     },
     cameraContainer: {
       height: getHeight(550),
@@ -44,9 +45,8 @@ const AddPhoto = ({
       flex: 1,
     },
     overlay: {
-      flex: 1,
       position: "absolute",
-      top: getHeight(50),
+      // top: getHeight(50),
       left: 0,
       width: "100%",
       height: "100%",
@@ -60,7 +60,7 @@ const AddPhoto = ({
       alignItems: "center",
       justifyContent: "space-around",
       paddingVertical: getHeight(15),
-      backgroundColor: "white",
+      backgroundColor: 'rgba(252, 252, 252, 1)',
     },
     rotateButton: {
       size: fontSize(24),
diff --git a/node_modules/the-core-ui-module-tdslideshow/src/components/Header.js b/node_modules/the-core-ui-module-tdslideshow/src/components/Header.js
index 507924f..243d0c8 100644
--- a/node_modules/the-core-ui-module-tdslideshow/src/components/Header.js
+++ b/node_modules/the-core-ui-module-tdslideshow/src/components/Header.js
@@ -7,10 +7,12 @@
  */
 
 import React from "react";
-import { View, TouchableOpacity, Text } from "react-native";
+import { View, TouchableOpacity, Text, I18nManager } from "react-native";
 import TDIcon from "the-core-ui-component-tdicon";
 import { ScaleHook } from "react-native-design-to-component";
 
+const photoSelect = require('../../../../assets/icons/photoSelect.png'); 
+
 const Header = ({
   setActiveViewIndex,
   handleSelectPhoto,
@@ -23,8 +25,10 @@ const Header = ({
   const styles = {
     container: {
       flexDirection: "row",
-      alignItems: "center",
-      height: getHeight(50),
+      alignItems: "flex-end",
+      backgroundColor: 'rgba(252, 252, 252, 1)',
+      paddingBottom: getHeight(15),
+      height: getHeight(90),
       justifyContent: "space-between",
     },
     leftContainer: {
@@ -37,6 +41,11 @@ const Header = ({
       size: fontSize(20),
       color: "#3a3a3a",
     },
+    photoIconStyle: {
+      height: getHeight(23),
+      width: getWidth(17),
+      resizeMode: 'contain',
+    },
     titleTextStyle: {
       fontSize: fontSize(20),
       fontWeight: "bold",
@@ -59,13 +68,13 @@ const Header = ({
     <View style={styles.container}>
       <View style={styles.leftContainer}>
         <TouchableOpacity onPress={handleGoBack}>
-          <TDIcon input="chevron-left" inputStyle={styles.iconStyle} />
+          <TDIcon input={I18nManager.isRTL? "chevron-right" : "chevron-left"} inputStyle={styles.iconStyle} />
         </TouchableOpacity>
       </View>
       <Text style={styles.titleTextStyle}>{cameraHeaderText}</Text>
       <View style={styles.rightContainer}>
         <TouchableOpacity onPress={handleSelectPhoto} activeOpacity={1}>
-          <TDIcon input="images" inputStyle={styles.iconStyle} />
+          <TDIcon input={photoSelect} inputStyle={styles.photoIconStyle} />    
         </TouchableOpacity>
       </View>
     </View>
diff --git a/node_modules/the-core-ui-module-tdslideshow/src/components/ImageSlider.js b/node_modules/the-core-ui-module-tdslideshow/src/components/ImageSlider.js
index 1bbdec1..77c0ace 100644
--- a/node_modules/the-core-ui-module-tdslideshow/src/components/ImageSlider.js
+++ b/node_modules/the-core-ui-module-tdslideshow/src/components/ImageSlider.js
@@ -33,11 +33,13 @@ const ImageSlider = ({
   sliderSpacerHeight,
   sliderIcon,
   DateSelectors,
+  CustomButton,
+  CustomHeader,
 }) => {
   // ******* SETUP *******
   const screenWidth = Dimensions.get("screen").width;
   const leftAlign = (screenWidth - imageWidth) / 2;
-  const { getHeight, getWidth } = ScaleHook();
+  const { getHeight, getWidth, fontSize } = ScaleHook();
 
   // ******* STYLES *******
   const styles = StyleSheet.create({
@@ -99,16 +101,19 @@ const ImageSlider = ({
   // ******* RENDER *******
   return (
     <View>
+      {CustomHeader && (
+        <CustomHeader />
+      )}
       <View style={styles.imagesContainer}>
         {DateSelectors && <DateSelectors />}
         <View style={styles.beforeContainer}>
           {beforePic && (
-            <Image source={{ uri: beforePic }} style={styles.beforeImage} />
+            <Image source={beforePic} style={styles.beforeImage} />
           )}
         </View>
         <View style={styles.afterContainer}>
           {afterPic && (
-            <Image source={{ uri: afterPic }} style={styles.afterImage} />
+            <Image source={afterPic} style={styles.afterImage} />
           )}
         </View>
       </View>
@@ -118,9 +123,10 @@ const ImageSlider = ({
           width: sliderStyles.width,
           height: sliderStyles.height,
           alignSelf: "center",
-        }}
-        minimumValue={0}
-        maximumValue={imageWidth}
+        } }
+        // patch
+        minimumValue={imageWidth / 10}
+        maximumValue={(imageWidth / 10) * 9}
         step={imageWidth / 10}
         value={imageWidth / 2}
         minimumTrackTintColor={sliderStyles.minimumTrackTintColor}
